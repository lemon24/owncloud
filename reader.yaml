
- hosts: all
  gather_facts: no
  become: true
  become_method: sudo
  tasks:

  - name: create apps directory
    file:
      path: /apps
      state: directory


  - name: install uwsgi
    package:
      name: "{{ item }}"
      state: latest
    loop:
      - uwsgi
      - uwsgi-plugin-python3

  # TODO: stop uwsgi reader service, remove from nginx, remove virtualenv

  - name: install venv
    package:
      name: python3-venv
      state: latest

  - name: create virtualenv with reader
    pip:
      name: git+https://github.com/lemon24/reader.git
      virtualenv: /apps/reader
      virtualenv_command: /usr/bin/python3 -m venv
      virtualenv_site_packages: yes
      state: latest

  - name: install packages needed to build sqlite
    package:
      name: "{{ item }}"
      state: latest
    loop:
      - gcc
      - unzip

  # From https://github.com/lemon24/reader/blob/master/build-sqlite.sh
  - name: compile new enough sqlite
    shell: |

      cd /apps/reader/

      if [ ! -e /apps/reader/sqlite/libsqlite3.so.0 ]; then
          echo "compiling sqlite"
          wget https://sqlite.org/2018/sqlite-amalgamation-3220000.zip
          unzip sqlite-amalgamation-3220000.zip
          rm sqlite-amalgamation-3220000.zip
          mv sqlite-amalgamation-3220000 sqlite
          cd sqlite
          gcc -c -fPIC -O2 -I. \
              -DSQLITE_THREADSAFE=0 \
              -DSQLITE_ENABLE_FTS4 \
              -DSQLITE_ENABLE_FTS5 \
              -DSQLITE_ENABLE_JSON1 \
              -DSQLITE_ENABLE_RTREE \
              -DSQLITE_ENABLE_EXPLAIN_COMMENTS \
              -DHAVE_USLEEP \
              sqlite3.c
          gcc -shared -o libsqlite3.so -fPIC sqlite3.o -ldl -lpthread
          ln -s libsqlite3.so libsqlite3.so.0
          cd ..
      else
          echo "using existing sqlite"
      fi

      exit 0

  - name: create database directory
    file:
      path: /data/www-data
      state: directory
      owner: www-data

  - name: create app file
    copy:
      dest: /apps/reader/app.py
      content: |
        from reader.app import create_app
        app = create_app('/data/www-data/reader.sqlite')

  # TODO: should use emperor
  - name: create uwsgi config file
    copy:
      dest: /apps/reader/uwsgi.ini
      content: |
        [uwsgi]
        socket = /apps/reader/uwsgi/sock
        manage-script-name = true
        mount = /reader=app:app
        plugin = python3
        virtualenv = /apps/reader/
        env = PYTHONPATH=/apps/reader

  # TODO: permissions
  - name: create uwsgi socket dir
    file:
      path: /apps/reader/uwsgi
      state: directory
      owner: www-data

  - name: create uwsgi reader service
    copy:
      dest: /etc/systemd/system/uwsgi_reader.service
      content: |
        [Unit]
        Description=uwsgi reader
        After=syslog.target

        [Service]
        User=www-data
        ExecStart=/bin/sh -c 'LD_LIBRARY_PATH=/apps/reader/sqlite:$LD_LIBRARY_PATH /usr/bin/uwsgi --ini /apps/reader/uwsgi.ini'
        Restart=always
        KillSignal=SIGQUIT
        Type=notify
        StandardError=syslog
        NotifyAccess=all

        [Install]
        WantedBy=multi-user.target

  - name: restart uwsgi reader service
    service:
      name: uwsgi_reader
      state: restarted

  - name: add nginx config
    copy:
      dest: /etc/nginx/secure/reader.conf
      content: |
        location /reader/ {
            include uwsgi_params;
            uwsgi_pass unix:/apps/reader/uwsgi/sock;
        }

        location = /reader { rewrite ^ /reader/; }

        location /reader/static/ {
            alias /apps/reader/lib/python3.5/site-packages/reader/static/;
        }

  - name: reload nginx config
    command: nginx -s reload

  - name: create log directory
    file:
      path: /var/log/reader
      state: directory
      owner: www-data

  - name: add crontab entry
    cron:
      name: reader update
      user: www-data
      special_time: hourly
      job: >
        LD_LIBRARY_PATH=/apps/reader/sqlite
        /apps/reader/bin/python -m reader
        --db /data/www-data/reader.sqlite update -v
        >>/var/log/reader/update.log 2>&1

  # TODO: backup database to s3

